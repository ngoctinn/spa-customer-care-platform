"""Refactor

Revision ID: 929e4d8a7b6f
Revises: e48cb1b6d34a
Create Date: 2025-10-03 15:53:18.872890

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "929e4d8a7b6f"
down_revision: Union[str, Sequence[str], None] = "e48cb1b6d34a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - CORRECTED ORDER ###

    # Step 1: Create all new tables
    op.create_table(
        "category",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("category_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_category_category_type"), "category", ["category_type"], unique=False
    )
    op.create_index(op.f("ix_category_id"), "category", ["id"], unique=False)
    op.create_index(
        op.f("ix_category_is_deleted"), "category", ["is_deleted"], unique=False
    )
    op.create_index(op.f("ix_category_name"), "category", ["name"], unique=False)

    op.create_table(
        "product",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("stock", sa.Integer(), nullable=False),
        sa.Column("is_retail", sa.Boolean(), nullable=False),
        sa.Column("is_consumable", sa.Boolean(), nullable=False),
        sa.Column(
            "base_unit", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False
        ),
        sa.Column(
            "consumable_unit",
            sqlmodel.sql.sqltypes.AutoString(length=50),
            nullable=True,
        ),
        sa.Column("conversion_rate", sa.Float(), nullable=True),
        sa.Column("category_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_product_id"), "product", ["id"], unique=False)
    op.create_index(
        op.f("ix_product_is_deleted"), "product", ["is_deleted"], unique=False
    )
    op.create_index(op.f("ix_product_name"), "product", ["name"], unique=True)

    op.create_table(
        "treatment_plan",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("total_sessions", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_treatment_plan_id"), "treatment_plan", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_treatment_plan_is_deleted"),
        "treatment_plan",
        ["is_deleted"],
        unique=False,
    )
    op.create_index(
        op.f("ix_treatment_plan_name"), "treatment_plan", ["name"], unique=True
    )

    op.create_table(
        "image",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("alt_text", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_primary", sa.Boolean(), nullable=False),
        sa.Column("service_id", sa.Uuid(), nullable=True),
        sa.Column("product_id", sa.Uuid(), nullable=True),
        sa.Column("treatment_plan_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["service.id"],
        ),
        sa.ForeignKeyConstraint(
            ["treatment_plan_id"],
            ["treatment_plan.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_image_id"), "image", ["id"], unique=False)
    op.create_index(op.f("ix_image_is_deleted"), "image", ["is_deleted"], unique=False)

    op.create_table(
        "treatment_plan_step",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("step_number", sa.Integer(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("treatment_plan_id", sa.Uuid(), nullable=False),
        sa.Column("service_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["service.id"],
        ),
        sa.ForeignKeyConstraint(
            ["treatment_plan_id"],
            ["treatment_plan.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_treatment_plan_step_id"), "treatment_plan_step", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_treatment_plan_step_is_deleted"),
        "treatment_plan_step",
        ["is_deleted"],
        unique=False,
    )

    # Step 2: Modify 'service' table BEFORE dropping old tables
    op.drop_constraint("service_category_id_fkey", "service", type_="foreignkey")
    op.create_foreign_key(None, "service", "category", ["category_id"], ["id"])

    # Step 3: Drop old tables now that they are no longer depended on
    op.drop_index("ix_service_category_id", table_name="service_category")
    op.drop_index("ix_service_category_is_deleted", table_name="service_category")
    op.drop_index("ix_service_category_name", table_name="service_category")
    op.drop_table("service_category")

    op.drop_index("ix_service_image_id", table_name="service_image")
    op.drop_index("ix_service_image_is_deleted", table_name="service_image")
    op.drop_table("service_image")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - CORRECTED ORDER ###

    # Step 1: Re-create old tables first
    op.create_table(
        "service_category",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_deleted", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="service_category_pkey"),
    )
    op.create_index(
        "ix_service_category_name", "service_category", ["name"], unique=True
    )
    op.create_index(
        "ix_service_category_is_deleted",
        "service_category",
        ["is_deleted"],
        unique=False,
    )
    op.create_index("ix_service_category_id", "service_category", ["id"], unique=False)

    op.create_table(
        "service_image",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_deleted", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("service_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("url", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("alt_text", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_primary", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["service_id"], ["service.id"], name="service_image_service_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="service_image_pkey"),
    )
    op.create_index(
        "ix_service_image_is_deleted",
        "service_image",
        ["is_deleted"],
        unique=False,
    )
    op.create_index("ix_service_image_id", "service_image", ["id"], unique=False)

    # Step 2: Revert changes on 'service' table
    op.drop_constraint(
        None, "service", type_="foreignkey"
    )  # Drops the new FK to 'category'
    op.create_foreign_key(
        "service_category_id_fkey",
        "service",
        "service_category",
        ["category_id"],
        ["id"],
    )

    # Step 3: Drop all the new tables
    op.drop_index(
        op.f("ix_treatment_plan_step_is_deleted"), table_name="treatment_plan_step"
    )
    op.drop_index(op.f("ix_treatment_plan_step_id"), table_name="treatment_plan_step")
    op.drop_table("treatment_plan_step")

    op.drop_index(op.f("ix_image_is_deleted"), table_name="image")
    op.drop_index(op.f("ix_image_id"), table_name="image")
    op.drop_table("image")

    op.drop_index(op.f("ix_treatment_plan_name"), table_name="treatment_plan")
    op.drop_index(op.f("ix_treatment_plan_is_deleted"), table_name="treatment_plan")
    op.drop_index(op.f("ix_treatment_plan_id"), table_name="treatment_plan")
    op.drop_table("treatment_plan")

    op.drop_index(op.f("ix_product_name"), table_name="product")
    op.drop_index(op.f("ix_product_is_deleted"), table_name="product")
    op.drop_index(op.f("ix_product_id"), table_name="product")
    op.drop_table("product")

    op.drop_index(op.f("ix_category_name"), table_name="category")
    op.drop_index(op.f("ix_category_is_deleted"), table_name="category")
    op.drop_index(op.f("ix_category_id"), table_name="category")
    op.drop_index(op.f("ix_category_category_type"), table_name="category")
    op.drop_table("category")

    # ### end Alembic commands ###
